# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import face_recognition_pb2 as face__recognition__pb2


class FaceRecognitionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterFace = channel.unary_unary(
                '/face_recognition.FaceRecognitionService/RegisterFace',
                request_serializer=face__recognition__pb2.RegisterFaceRequest.SerializeToString,
                response_deserializer=face__recognition__pb2.RegisterFaceResponse.FromString,
                )
        self.RecognizeFaces = channel.unary_unary(
                '/face_recognition.FaceRecognitionService/RecognizeFaces',
                request_serializer=face__recognition__pb2.RecognizeRequest.SerializeToString,
                response_deserializer=face__recognition__pb2.RecognizeResponse.FromString,
                )
        self.ListFaces = channel.unary_unary(
                '/face_recognition.FaceRecognitionService/ListFaces',
                request_serializer=face__recognition__pb2.ListFacesRequest.SerializeToString,
                response_deserializer=face__recognition__pb2.ListFacesResponse.FromString,
                )
        self.DeleteFace = channel.unary_unary(
                '/face_recognition.FaceRecognitionService/DeleteFace',
                request_serializer=face__recognition__pb2.DeleteFaceRequest.SerializeToString,
                response_deserializer=face__recognition__pb2.DeleteFaceResponse.FromString,
                )
        self.UpdateFaceMetadata = channel.unary_unary(
                '/face_recognition.FaceRecognitionService/UpdateFaceMetadata',
                request_serializer=face__recognition__pb2.UpdateMetadataRequest.SerializeToString,
                response_deserializer=face__recognition__pb2.UpdateMetadataResponse.FromString,
                )
        self.GetFaceQuality = channel.unary_unary(
                '/face_recognition.FaceRecognitionService/GetFaceQuality',
                request_serializer=face__recognition__pb2.FaceQualityRequest.SerializeToString,
                response_deserializer=face__recognition__pb2.FaceQualityResponse.FromString,
                )
        self.VerifyLiveness = channel.unary_unary(
                '/face_recognition.FaceRecognitionService/VerifyLiveness',
                request_serializer=face__recognition__pb2.LivenessRequest.SerializeToString,
                response_deserializer=face__recognition__pb2.LivenessResponse.FromString,
                )


class FaceRecognitionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterFace(self, request, context):
        """Register a face in the database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecognizeFaces(self, request, context):
        """Recognize faces in an image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFaces(self, request, context):
        """Get all registered faces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFace(self, request, context):
        """Delete a face from the database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFaceMetadata(self, request, context):
        """Update face metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFaceQuality(self, request, context):
        """Get face quality score
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyLiveness(self, request, context):
        """Verify liveness of face
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaceRecognitionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterFace': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterFace,
                    request_deserializer=face__recognition__pb2.RegisterFaceRequest.FromString,
                    response_serializer=face__recognition__pb2.RegisterFaceResponse.SerializeToString,
            ),
            'RecognizeFaces': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizeFaces,
                    request_deserializer=face__recognition__pb2.RecognizeRequest.FromString,
                    response_serializer=face__recognition__pb2.RecognizeResponse.SerializeToString,
            ),
            'ListFaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFaces,
                    request_deserializer=face__recognition__pb2.ListFacesRequest.FromString,
                    response_serializer=face__recognition__pb2.ListFacesResponse.SerializeToString,
            ),
            'DeleteFace': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFace,
                    request_deserializer=face__recognition__pb2.DeleteFaceRequest.FromString,
                    response_serializer=face__recognition__pb2.DeleteFaceResponse.SerializeToString,
            ),
            'UpdateFaceMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFaceMetadata,
                    request_deserializer=face__recognition__pb2.UpdateMetadataRequest.FromString,
                    response_serializer=face__recognition__pb2.UpdateMetadataResponse.SerializeToString,
            ),
            'GetFaceQuality': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFaceQuality,
                    request_deserializer=face__recognition__pb2.FaceQualityRequest.FromString,
                    response_serializer=face__recognition__pb2.FaceQualityResponse.SerializeToString,
            ),
            'VerifyLiveness': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyLiveness,
                    request_deserializer=face__recognition__pb2.LivenessRequest.FromString,
                    response_serializer=face__recognition__pb2.LivenessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'face_recognition.FaceRecognitionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaceRecognitionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face_recognition.FaceRecognitionService/RegisterFace',
            face__recognition__pb2.RegisterFaceRequest.SerializeToString,
            face__recognition__pb2.RegisterFaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecognizeFaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face_recognition.FaceRecognitionService/RecognizeFaces',
            face__recognition__pb2.RecognizeRequest.SerializeToString,
            face__recognition__pb2.RecognizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face_recognition.FaceRecognitionService/ListFaces',
            face__recognition__pb2.ListFacesRequest.SerializeToString,
            face__recognition__pb2.ListFacesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face_recognition.FaceRecognitionService/DeleteFace',
            face__recognition__pb2.DeleteFaceRequest.SerializeToString,
            face__recognition__pb2.DeleteFaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFaceMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face_recognition.FaceRecognitionService/UpdateFaceMetadata',
            face__recognition__pb2.UpdateMetadataRequest.SerializeToString,
            face__recognition__pb2.UpdateMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFaceQuality(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face_recognition.FaceRecognitionService/GetFaceQuality',
            face__recognition__pb2.FaceQualityRequest.SerializeToString,
            face__recognition__pb2.FaceQualityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyLiveness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face_recognition.FaceRecognitionService/VerifyLiveness',
            face__recognition__pb2.LivenessRequest.SerializeToString,
            face__recognition__pb2.LivenessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
